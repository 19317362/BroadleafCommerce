<testng-results>
  <reporter-output>
  </reporter-output>
  <suite name="Command line suite">
    <groups>
      <group name="addPaymentToOrder">
        <method signature="org.broadleafcommerce.order.service.OrderTest.addPaymentToOrder(org.broadleafcommerce.payment.domain.PaymentInfo)" name="addPaymentToOrder" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="testOrderPaymentInfos">
        <method signature="org.broadleafcommerce.order.service.OrderTest.testOrderPaymentInfos(org.broadleafcommerce.payment.domain.PaymentInfo)" name="testOrderPaymentInfos" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="offerCreateSku1">
        <method signature="org.broadleafcommerce.offer.service.OfferTest.createSku1(org.broadleafcommerce.catalog.domain.Sku)" name="createSku1" class="org.broadleafcommerce.offer.service.OfferTest"/>
      </group>
      <group name="readFulfillmentGroupItemsById">
        <method signature="org.broadleafcommerce.order.dao.FulfillmentGroupItemDaoTest.readFulfillmentGroupItemsById()" name="readFulfillmentGroupItemsById" class="org.broadleafcommerce.order.dao.FulfillmentGroupItemDaoTest"/>
      </group>
      <group name="createGiftWrapOrderItem">
        <method signature="org.broadleafcommerce.order.dao.OrderItemDaoTest.createGiftWrapOrderItem(org.broadleafcommerce.order.domain.GiftWrapOrderItem)" name="createGiftWrapOrderItem" class="org.broadleafcommerce.order.dao.OrderItemDaoTest"/>
      </group>
      <group name="testReadProductsWithUpSaleValues">
        <method signature="org.broadleafcommerce.catalog.dao.ProductDaoTest.testReadProductsWithUpSaleValues(org.broadleafcommerce.catalog.domain.Product)" name="testReadProductsWithUpSaleValues" class="org.broadleafcommerce.catalog.dao.ProductDaoTest"/>
      </group>
      <group name="testOfferLowerSalePriceWithNotCombinableOfferAndInformation">
        <method signature="org.broadleafcommerce.offer.service.OfferTest.testOfferLowerSalePriceWithNotCombinableOfferAndInformation()" name="testOfferLowerSalePriceWithNotCombinableOfferAndInformation" class="org.broadleafcommerce.offer.service.OfferTest"/>
      </group>
      <group name="findOrderByOrderNumber">
        <method signature="org.broadleafcommerce.order.service.OrderTest.findOrderByOrderNumber()" name="findOrderByOrderNumber" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="readOrderItemsById">
        <method signature="org.broadleafcommerce.order.dao.OrderItemDaoTest.readOrderItemsById()" name="readOrderItemsById" class="org.broadleafcommerce.order.dao.OrderItemDaoTest"/>
      </group>
      <group name="offerUsedForPricing">
        <method signature="org.broadleafcommerce.offer.service.OfferTest.testOfferUsedForPricing()" name="testOfferUsedForPricing" class="org.broadleafcommerce.offer.service.OfferTest"/>
      </group>
      <group name="getOrdersForCustomer">
        <method signature="org.broadleafcommerce.order.service.OrderTest.getOrdersForCustomer()" name="getOrdersForCustomer" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="readOrderItemsByIdAfterGiftWrapDeletion">
        <method signature="org.broadleafcommerce.order.dao.OrderItemDaoTest.readOrderItemsByIdAfterGiftWrapDeletion()" name="readOrderItemsByIdAfterGiftWrapDeletion" class="org.broadleafcommerce.order.dao.OrderItemDaoTest"/>
      </group>
      <group name="testCustomerAssociatedOffers">
        <method signature="org.broadleafcommerce.offer.service.OfferTest.testCustomerAssociatedOffers()" name="testCustomerAssociatedOffers" class="org.broadleafcommerce.offer.service.OfferTest"/>
      </group>
      <group name="testReadProductsWithCrossSaleValues">
        <method signature="org.broadleafcommerce.catalog.dao.ProductDaoTest.testReadProductsWithCrossSaleValues(org.broadleafcommerce.catalog.domain.Product)" name="testReadProductsWithCrossSaleValues" class="org.broadleafcommerce.catalog.dao.ProductDaoTest"/>
      </group>
      <group name="testAdminRoleSave">
        <method signature="org.broadleafcommerce.security.service.AdminRoleTest.testAdminRoleSave(org.broadleafcommerce.security.domain.AdminRole)" name="testAdminRoleSave" class="org.broadleafcommerce.security.service.AdminRoleTest"/>
      </group>
      <group name="testOfferLowerSalePriceWithNotCombinableOffer2">
        <method signature="org.broadleafcommerce.offer.service.OfferTest.testOfferLowerSalePriceWithNotCombinableOffer2()" name="testOfferLowerSalePriceWithNotCombinableOffer2" class="org.broadleafcommerce.offer.service.OfferTest"/>
      </group>
      <group name="testReadOrdersForCustomer">
        <method signature="org.broadleafcommerce.order.service.OrderTest.testReadOrdersForCustomer()" name="testReadOrdersForCustomer" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="createSkuAvailability">
        <method signature="org.broadleafcommerce.inventory.service.SkuAvailabilityTest.createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)" name="createSkuAvailability" class="org.broadleafcommerce.inventory.service.SkuAvailabilityTest"/>
      </group>
      <group name="testCustomerOffers">
        <method signature="org.broadleafcommerce.offer.service.OfferTest.testCustomerOffers()" name="testCustomerOffers" class="org.broadleafcommerce.offer.service.OfferTest"/>
      </group>
      <group name="testOfferLowerSalePriceWithNotCombinableOffer">
        <method signature="org.broadleafcommerce.offer.service.OfferTest.testOfferLowerSalePriceWithNotCombinableOffer()" name="testOfferLowerSalePriceWithNotCombinableOffer" class="org.broadleafcommerce.offer.service.OfferTest"/>
      </group>
      <group name="createDefaultFulfillmentGroup">
        <method signature="org.broadleafcommerce.order.dao.FulfillmentGroupDaoTest.createDefaultFulfillmentGroup(org.broadleafcommerce.order.domain.FulfillmentGroup)" name="createDefaultFulfillmentGroup" class="org.broadleafcommerce.order.dao.FulfillmentGroupDaoTest"/>
      </group>
      <group name="readFulfillmentGroupsForId">
        <method signature="org.broadleafcommerce.order.dao.FulfillmentGroupDaoTest.readFulfillmentGroupsForId()" name="readFulfillmentGroupsForId" class="org.broadleafcommerce.order.dao.FulfillmentGroupDaoTest"/>
      </group>
      <group name="testSetFeaturedProducts">
        <method signature="org.broadleafcommerce.catalog.dao.CategoryDaoTest.testSetFeaturedProducts(org.broadleafcommerce.catalog.domain.Category)" name="testSetFeaturedProducts" class="org.broadleafcommerce.catalog.dao.CategoryDaoTest"/>
      </group>
      <group name="createState">
        <method signature="org.broadleafcommerce.profile.service.AddressTest.createState()" name="createState" class="org.broadleafcommerce.profile.service.AddressTest"/>
      </group>
      <group name="testSubmitOrder">
        <method signature="org.broadleafcommerce.order.service.OrderTest.testSubmitOrder()" name="testSubmitOrder" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="testOfferCodeDao">
        <method signature="org.broadleafcommerce.offer.service.OfferTest.testOfferCodeDao()" name="testOfferCodeDao" class="org.broadleafcommerce.offer.service.OfferTest"/>
      </group>
      <group name="addBundleToOrder">
        <method signature="org.broadleafcommerce.order.service.OrderTest.addBundleToOrder()" name="addBundleToOrder" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="removeFulfillmentGroupFromOrder">
        <method signature="org.broadleafcommerce.order.service.OrderTest.removeFulfillmentGroupFromOrder()" name="removeFulfillmentGroupFromOrder" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="testOfferNotStackableOrderOffers">
        <method signature="org.broadleafcommerce.offer.service.OfferTest.testOfferNotStackableOrderOffers()" name="testOfferNotStackableOrderOffers" class="org.broadleafcommerce.offer.service.OfferTest"/>
      </group>
      <group name="readCustomer">
        <method signature="org.broadleafcommerce.profile.service.CustomerTest.readCustomersById()" name="readCustomersById" class="org.broadleafcommerce.profile.service.CustomerTest"/>
      </group>
      <group name="createUpSaleValues">
        <method signature="org.broadleafcommerce.catalog.dao.ProductDaoTest.createUpSaleValues(org.broadleafcommerce.catalog.domain.Product)" name="createUpSaleValues" class="org.broadleafcommerce.catalog.dao.ProductDaoTest"/>
      </group>
      <group name="createCustomerPhone">
        <method signature="org.broadleafcommerce.profile.service.CustomerPhoneTest.createCustomerPhone(org.broadleafcommerce.profile.domain.CustomerPhone)" name="createCustomerPhone" class="org.broadleafcommerce.profile.service.CustomerPhoneTest"/>
      </group>
      <group name="testOfferNotCombinableOrderOffersWithItemOffer">
        <method signature="org.broadleafcommerce.offer.service.OfferTest.testOfferNotCombinableOrderOffersWithItemOffer()" name="testOfferNotCombinableOrderOffersWithItemOffer" class="org.broadleafcommerce.offer.service.OfferTest"/>
      </group>
      <group name="findFulFillmentGroupForOrderFirst">
        <method signature="org.broadleafcommerce.order.service.OrderTest.findFillmentGroupForOrderFirst()" name="findFillmentGroupForOrderFirst" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="readSkuById">
        <method signature="org.broadleafcommerce.catalog.dao.SkuDaoTest.readSkuById()" name="readSkuById" class="org.broadleafcommerce.catalog.dao.SkuDaoTest"/>
      </group>
      <group name="applyOffersToOrder">
        <method signature="org.broadleafcommerce.offer.service.OfferServiceTest.applyOffersToOrder(java.util.List)" name="applyOffersToOrder" class="org.broadleafcommerce.offer.service.OfferServiceTest"/>
      </group>
      <group name="changeCustomerPassword">
        <method signature="org.broadleafcommerce.profile.service.CustomerTest.changeCustomerPasswords()" name="changeCustomerPasswords" class="org.broadleafcommerce.profile.service.CustomerTest"/>
      </group>
      <group name="removeItemFromOrder">
        <method signature="org.broadleafcommerce.order.service.OrderTest.removeItemFromOrder()" name="removeItemFromOrder" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="removeBundleFromOrder">
        <method signature="org.broadleafcommerce.order.service.OrderTest.removeBundleFromOrder()" name="removeBundleFromOrder" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="readDefaultFulfillmentGroupForOrder">
        <method signature="org.broadleafcommerce.order.dao.FulfillmentGroupDaoTest.readDefaultFulfillmentGroupForOrder()" name="readDefaultFulfillmentGroupForOrder" class="org.broadleafcommerce.order.dao.FulfillmentGroupDaoTest"/>
      </group>
      <group name="testOfferLowerSalePrice">
        <method signature="org.broadleafcommerce.offer.service.OfferTest.testOfferLowerSalePrice()" name="testOfferLowerSalePrice" class="org.broadleafcommerce.offer.service.OfferTest"/>
      </group>
      <group name="createCustomerIdGeneration">
        <method signature="org.broadleafcommerce.profile.service.CustomerTest.createCustomerIdGeneration()" name="createCustomerIdGeneration" class="org.broadleafcommerce.profile.service.CustomerTest"/>
      </group>
      <group name="findCountryByShortName">
        <method signature="org.broadleafcommerce.profile.service.AddressTest.findCountryByShortName()" name="findCountryByShortName" class="org.broadleafcommerce.profile.service.AddressTest"/>
      </group>
      <group name="findStates">
        <method signature="org.broadleafcommerce.profile.service.AddressTest.findStates()" name="findStates" class="org.broadleafcommerce.profile.service.AddressTest"/>
      </group>
      <group name="viewExistingCustomerPhoneFromController">
        <method signature="org.broadleafcommerce.profile.service.CustomerPhoneControllerTest.viewExistingCustomerPhoneFromController()" name="viewExistingCustomerPhoneFromController" class="org.broadleafcommerce.profile.service.CustomerPhoneControllerTest"/>
      </group>
      <group name="testFulfillmentGroupOffers">
        <method signature="org.broadleafcommerce.offer.service.OfferTest.testFulfillmentGroupOffers()" name="testFulfillmentGroupOffers" class="org.broadleafcommerce.offer.service.OfferTest"/>
      </group>
      <group name="createCustomerAddress">
        <method signature="org.broadleafcommerce.profile.service.CustomerAddressTest.createCustomerAddress(org.broadleafcommerce.profile.domain.CustomerAddress)" name="createCustomerAddress" class="org.broadleafcommerce.profile.service.CustomerAddressTest"/>
      </group>
      <group name="readPaymentInfoById">
        <method signature="org.broadleafcommerce.payment.service.PaymentInfoServiceTest.readPaymentInfoById()" name="readPaymentInfoById" class="org.broadleafcommerce.payment.service.PaymentInfoServiceTest"/>
      </group>
      <group name="readCustomerPhoneFromController">
        <method signature="org.broadleafcommerce.profile.service.CustomerPhoneControllerTest.readCustomerPhoneFromController()" name="readCustomerPhoneFromController" class="org.broadleafcommerce.profile.service.CustomerPhoneControllerTest"/>
      </group>
      <group name="testShipping">
        <method signature="org.broadleafcommerce.pricing.service.PricingTest.testShipping()" name="testShipping" class="org.broadleafcommerce.pricing.service.PricingTest"/>
      </group>
      <group name="readPaymentInfosByOrder">
        <method signature="org.broadleafcommerce.payment.service.PaymentInfoServiceTest.readPaymentInfoByOrder()" name="readPaymentInfoByOrder" class="org.broadleafcommerce.payment.service.PaymentInfoServiceTest"/>
      </group>
      <group name="testShippingInsert">
        <method signature="org.broadleafcommerce.pricing.service.PricingTest.testShippingInsert(org.broadleafcommerce.pricing.domain.ShippingRate, org.broadleafcommerce.pricing.domain.ShippingRate)" name="testShippingInsert" class="org.broadleafcommerce.pricing.service.PricingTest"/>
      </group>
      <group name="readOrdersForCustomer">
        <method signature="org.broadleafcommerce.order.dao.OrderDaoTest.readOrdersForCustomer()" name="readOrdersForCustomer" class="org.broadleafcommerce.order.dao.OrderDaoTest"/>
      </group>
      <group name="testGlobalOffers">
        <method signature="org.broadleafcommerce.offer.service.OfferTest.testGlobalOffers()" name="testGlobalOffers" class="org.broadleafcommerce.offer.service.OfferTest"/>
      </group>
      <group name="createCountry">
        <method signature="org.broadleafcommerce.profile.service.AddressTest.createCountry()" name="createCountry" class="org.broadleafcommerce.profile.service.AddressTest"/>
      </group>
      <group name="findDefaultFulFillmentGroupForOrder">
        <method signature="org.broadleafcommerce.order.service.OrderTest.findDefaultFillmentGroupForOrder()" name="findDefaultFillmentGroupForOrder" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="getItemsForOrder">
        <method signature="org.broadleafcommerce.order.service.OrderTest.getItemsForOrder()" name="getItemsForOrder" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="addFulfillmentGroupToOrderFirst">
        <method signature="org.broadleafcommerce.order.service.OrderTest.addFulfillmentGroupToOrderFirst(org.broadleafcommerce.order.domain.FulfillmentGroup)" name="addFulfillmentGroupToOrderFirst" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="createOrder">
        <method signature="org.broadleafcommerce.order.dao.OrderDaoTest.createOrder(org.broadleafcommerce.order.domain.Order)" name="createOrder" class="org.broadleafcommerce.order.dao.OrderDaoTest"/>
      </group>
      <group name="addItemToFulfillmentGroupSecond">
        <method signature="org.broadleafcommerce.order.service.OrderTest.addItemToFulfillmentgroupSecond()" name="addItemToFulfillmentgroupSecond" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="viewCustomerPhoneFromController">
        <method signature="org.broadleafcommerce.profile.service.CustomerPhoneControllerTest.viewCustomerPhoneFromController()" name="viewCustomerPhoneFromController" class="org.broadleafcommerce.profile.service.CustomerPhoneControllerTest"/>
      </group>
      <group name="deleteGiftWrapOrderItemsById">
        <method signature="org.broadleafcommerce.order.dao.OrderItemDaoTest.deleteGiftWrapOrderItemsById()" name="deleteGiftWrapOrderItemsById" class="org.broadleafcommerce.order.dao.OrderItemDaoTest"/>
      </group>
      <group name="testNamedOrderForCustomer">
        <method signature="org.broadleafcommerce.order.service.OrderTest.testNamedOrderForCustomer()" name="testNamedOrderForCustomer" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="paginationObject">
        <method signature="org.broadleafcommerce.layout.PaginationCommandObjectTest.testDisplayList()" name="testDisplayList" class="org.broadleafcommerce.layout.PaginationCommandObjectTest"/>
        <method signature="org.broadleafcommerce.layout.PaginationCommandObjectTest.testIndices()" name="testIndices" class="org.broadleafcommerce.layout.PaginationCommandObjectTest"/>
        <method signature="org.broadleafcommerce.layout.PaginationCommandObjectTest.testFullList()" name="testFullList" class="org.broadleafcommerce.layout.PaginationCommandObjectTest"/>
      </group>
      <group name="createPhone">
        <method signature="org.broadleafcommerce.profile.service.PhoneTest.createPhone(org.broadleafcommerce.profile.domain.Phone)" name="createPhone" class="org.broadleafcommerce.profile.service.PhoneTest"/>
      </group>
      <group name="findStateByAbbreviation">
        <method signature="org.broadleafcommerce.profile.service.AddressTest.findStateByAbbreviation()" name="findStateByAbbreviation" class="org.broadleafcommerce.profile.service.AddressTest"/>
      </group>
      <group name="testAdminPermissionSave">
        <method signature="org.broadleafcommerce.security.service.AdminPermissionTest.testAdminPermissionSave(org.broadleafcommerce.security.domain.AdminPermission)" name="testAdminPermissionSave" class="org.broadleafcommerce.security.service.AdminPermissionTest"/>
      </group>
      <group name="createSku">
        <method signature="org.broadleafcommerce.catalog.dao.SkuDaoTest.createSku(org.broadleafcommerce.catalog.domain.Sku)" name="createSku" class="org.broadleafcommerce.catalog.dao.SkuDaoTest"/>
      </group>
      <group name="testOfferNotCombinableItemOffers">
        <method signature="org.broadleafcommerce.offer.service.OfferTest.testOfferNotCombinableItemOffers()" name="testOfferNotCombinableItemOffers" class="org.broadleafcommerce.offer.service.OfferTest"/>
      </group>
      <group name="offerCreateSku2">
        <method signature="org.broadleafcommerce.offer.service.OfferTest.createSku2(org.broadleafcommerce.catalog.domain.Sku)" name="createSku2" class="org.broadleafcommerce.offer.service.OfferTest"/>
      </group>
      <group name="testAddSkuToOrder">
        <method signature="org.broadleafcommerce.order.service.OrderTest.testAddSkuToOrder()" name="testAddSkuToOrder" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="createCustomerFromController">
        <method signature="org.broadleafcommerce.profile.service.RegisterCustomerControllerTest.createCustomerFromController(org.broadleafcommerce.profile.web.form.RegisterCustomerForm)" name="createCustomerFromController" class="org.broadleafcommerce.profile.service.RegisterCustomerControllerTest"/>
      </group>
      <group name="createCartForCustomer">
        <method signature="org.broadleafcommerce.order.service.OrderTest.createCartForCustomer()" name="createCartForCustomer" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="findNamedOrderForCustomer">
        <method signature="org.broadleafcommerce.order.service.OrderTest.findNamedOrderForCustomer()" name="findNamedOrderForCustomer" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="testOfferNotCombinableOrderOffers">
        <method signature="org.broadleafcommerce.offer.service.OfferTest.testOfferNotCombinableOrderOffers()" name="testOfferNotCombinableOrderOffers" class="org.broadleafcommerce.offer.service.OfferTest"/>
      </group>
      <group name="removeItemFromOrderAfterDefaultFulfillmentGroup">
        <method signature="org.broadleafcommerce.order.service.OrderTest.removeItemFromOrderAfterFulfillmentGroups()" name="removeItemFromOrderAfterFulfillmentGroups" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="testOrderProperties">
        <method signature="org.broadleafcommerce.order.service.OrderTest.testOrderProperties()" name="testOrderProperties" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="readFulfillmentGroupItemsForFulfillmentGroup">
        <method signature="org.broadleafcommerce.order.dao.FulfillmentGroupItemDaoTest.readFulfillmentGroupItemsForFulfillmentGroup()" name="readFulfillmentGroupItemsForFulfillmentGroup" class="org.broadleafcommerce.order.dao.FulfillmentGroupItemDaoTest"/>
      </group>
      <group name="readCustomer1">
        <method signature="org.broadleafcommerce.profile.service.CustomerTest.readCustomersByUsername1()" name="readCustomersByUsername1" class="org.broadleafcommerce.profile.service.CustomerTest"/>
      </group>
      <group name="findCartForAnonymousCustomer">
        <method signature="org.broadleafcommerce.order.service.OrderTest.findCartForAnonymousCustomer()" name="findCartForAnonymousCustomer" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="createCustomers">
        <method signature="org.broadleafcommerce.profile.service.CustomerTest.createCustomer(org.broadleafcommerce.profile.domain.Customer)" name="createCustomer" class="org.broadleafcommerce.profile.service.CustomerTest"/>
      </group>
      <group name="readGiftWrapOrderItemsById">
        <method signature="org.broadleafcommerce.order.dao.OrderItemDaoTest.readGiftWrapOrderItemsById()" name="readGiftWrapOrderItemsById" class="org.broadleafcommerce.order.dao.OrderItemDaoTest"/>
      </group>
      <group name="readFirstSku">
        <method signature="org.broadleafcommerce.catalog.dao.SkuDaoTest.readFirstSku()" name="readFirstSku" class="org.broadleafcommerce.catalog.dao.SkuDaoTest"/>
      </group>
      <group name="readCustomerPhone">
        <method signature="org.broadleafcommerce.profile.service.CustomerPhoneTest.readCustomerPhoneByUserId()" name="readCustomerPhoneByUserId" class="org.broadleafcommerce.profile.service.CustomerPhoneTest"/>
      </group>
      <group name="readDefaultFulfillmentGroupForId">
        <method signature="org.broadleafcommerce.order.dao.FulfillmentGroupDaoTest.readDefaultFulfillmentGroupForId()" name="readDefaultFulfillmentGroupForId" class="org.broadleafcommerce.order.dao.FulfillmentGroupDaoTest"/>
      </group>
      <group name="viewRegisterCustomerFromController">
        <method signature="org.broadleafcommerce.profile.service.RegisterCustomerControllerTest.viewRegisterCustomerFromController()" name="viewRegisterCustomerFromController" class="org.broadleafcommerce.profile.service.RegisterCustomerControllerTest"/>
      </group>
      <group name="createDiscreteOrderItem">
        <method signature="org.broadleafcommerce.order.dao.OrderItemDaoTest.createDiscreteOrderItem(org.broadleafcommerce.order.domain.DiscreteOrderItem)" name="createDiscreteOrderItem" class="org.broadleafcommerce.order.dao.OrderItemDaoTest"/>
      </group>
      <group name="createFulfillmentGroupItem">
        <method signature="org.broadleafcommerce.order.dao.FulfillmentGroupItemDaoTest.createFulfillmentGroupItem()" name="createFulfillmentGroupItem" class="org.broadleafcommerce.order.dao.FulfillmentGroupItemDaoTest"/>
      </group>
      <group name="updateItemsInOrder">
        <method signature="org.broadleafcommerce.order.service.OrderTest.updateItemsInOrder()" name="updateItemsInOrder" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="createPaymentInfo">
        <method signature="org.broadleafcommerce.payment.service.PaymentInfoServiceTest.createPaymentInfo(org.broadleafcommerce.payment.domain.PaymentInfo)" name="createPaymentInfo" class="org.broadleafcommerce.payment.service.PaymentInfoServiceTest"/>
      </group>
      <group name="testAdminUserSave">
        <method signature="org.broadleafcommerce.security.service.AdminUserTest.testAdminUserSave(org.broadleafcommerce.security.domain.AdminUser)" name="testAdminUserSave" class="org.broadleafcommerce.security.service.AdminUserTest"/>
      </group>
      <group name="addItemToOrder">
        <method signature="org.broadleafcommerce.order.service.OrderTest.addItemToOrder()" name="addItemToOrder" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="deleteOrderForCustomer">
        <method signature="org.broadleafcommerce.order.dao.OrderDaoTest.deleteOrderForCustomer()" name="deleteOrderForCustomer" class="org.broadleafcommerce.order.dao.OrderDaoTest"/>
      </group>
      <group name="findCurrentCartForCustomer">
        <method signature="org.broadleafcommerce.order.service.OrderTest.findCurrentCartForCustomer()" name="findCurrentCartForCustomer" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="readCustomerAddress">
        <method signature="org.broadleafcommerce.profile.service.CustomerAddressTest.readCustomerAddressByUserId()" name="readCustomerAddressByUserId" class="org.broadleafcommerce.profile.service.CustomerAddressTest"/>
      </group>
      <group name="makePhoneDefaultOnCustomerPhoneController">
        <method signature="org.broadleafcommerce.profile.service.CustomerPhoneControllerTest.makePhoneDefaultOnCustomerPhoneController()" name="makePhoneDefaultOnCustomerPhoneController" class="org.broadleafcommerce.profile.service.CustomerPhoneControllerTest"/>
      </group>
      <group name="testReadAllOffers">
        <method signature="org.broadleafcommerce.offer.service.OfferTest.testReadAllOffers()" name="testReadAllOffers" class="org.broadleafcommerce.offer.service.OfferTest"/>
      </group>
      <group name="findCountries">
        <method signature="org.broadleafcommerce.profile.service.AddressTest.findCountries()" name="findCountries" class="org.broadleafcommerce.profile.service.AddressTest"/>
      </group>
      <group name="readOrder">
        <method signature="org.broadleafcommerce.order.dao.OrderDaoTest.readOrderById()" name="readOrderById" class="org.broadleafcommerce.order.dao.OrderDaoTest"/>
      </group>
      <group name="testOfferNotStackableItemOffers">
        <method signature="org.broadleafcommerce.offer.service.OfferTest.testOfferNotStackableItemOffers()" name="testOfferNotStackableItemOffers" class="org.broadleafcommerce.offer.service.OfferTest"/>
      </group>
      <group name="createCrossSaleValues">
        <method signature="org.broadleafcommerce.catalog.dao.ProductDaoTest.createCrossSaleValues(org.broadleafcommerce.catalog.domain.Product)" name="createCrossSaleValues" class="org.broadleafcommerce.catalog.dao.ProductDaoTest"/>
      </group>
      <group name="createId">
        <method signature="org.broadleafcommerce.profile.service.IdGenerationTest.createId()" name="createId" class="org.broadleafcommerce.profile.service.IdGenerationTest"/>
      </group>
      <group name="addAnotherItemToOrder">
        <method signature="org.broadleafcommerce.order.service.OrderTest.addAnotherItemToOrder()" name="addAnotherItemToOrder" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="findIds">
        <method signature="org.broadleafcommerce.profile.service.IdGenerationTest.findIds()" name="findIds" class="org.broadleafcommerce.profile.service.IdGenerationTest"/>
      </group>
      <group name="testCreatePaymentInfo">
        <method signature="org.broadleafcommerce.payment.service.PaymentInfoServiceTest.createTestPaymentInfo()" name="createTestPaymentInfo" class="org.broadleafcommerce.payment.service.PaymentInfoServiceTest"/>
      </group>
      <group name="createFulfillmentGroup">
        <method signature="org.broadleafcommerce.order.dao.FulfillmentGroupDaoTest.createFulfillmentGroup(org.broadleafcommerce.order.domain.FulfillmentGroup)" name="createFulfillmentGroup" class="org.broadleafcommerce.order.dao.FulfillmentGroupDaoTest"/>
      </group>
      <group name="testOfferDelete">
        <method signature="org.broadleafcommerce.offer.service.OfferTest.testOfferDelete()" name="testOfferDelete" class="org.broadleafcommerce.offer.service.OfferTest"/>
      </group>
      <group name="readPhoneById">
        <method signature="org.broadleafcommerce.profile.service.PhoneTest.readPhoneById()" name="readPhoneById" class="org.broadleafcommerce.profile.service.PhoneTest"/>
      </group>
      <group name="createProducts">
        <method signature="org.broadleafcommerce.catalog.dao.ProductDaoTest.createProducts(org.broadleafcommerce.catalog.domain.Product)" name="createProducts" class="org.broadleafcommerce.catalog.dao.ProductDaoTest"/>
      </group>
      <group name="createCustomerPhoneFromController">
        <method signature="org.broadleafcommerce.profile.service.CustomerPhoneControllerTest.createCustomerPhoneFromController(org.broadleafcommerce.profile.web.model.PhoneNameForm)" name="createCustomerPhoneFromController" class="org.broadleafcommerce.profile.service.CustomerPhoneControllerTest"/>
      </group>
      <group name="checkOrderItems">
        <method signature="org.broadleafcommerce.order.service.OrderTest.checkOrderItems()" name="checkOrderItems" class="org.broadleafcommerce.order.service.OrderTest"/>
      </group>
      <group name="readCustomer2">
        <method signature="org.broadleafcommerce.profile.service.CustomerTest.readCustomersByUsername2()" name="readCustomersByUsername2" class="org.broadleafcommerce.profile.service.CustomerTest"/>
      </group>
    </groups>
    <test name="Command line test">
      <class name="org.broadleafcommerce.security.service.AdminRoleTest">
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:59Z" finished-at="2009-08-05T15:42:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.security.service.AdminRoleTest.testAdminRoleSave(org.broadleafcommerce.security.domain.AdminRole) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:59Z" finished-at="2009-08-05T15:42:59Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:59Z" finished-at="2009-08-05T15:42:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.security.service.AdminRoleTest.testAdminRoleSave(org.broadleafcommerce.security.domain.AdminRole) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="18" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:59Z">
        </test-method>
        <test-method status="PASS" signature="testAdminRoleSave(org.broadleafcommerce.security.domain.AdminRole)" name="testAdminRoleSave" duration-ms="13" started-at="2009-08-05T15:42:59Z" finished-at="2009-08-05T15:42:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.security.domain.AdminRoleImpl@fb87e4]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:59Z" finished-at="2009-08-05T15:42:59Z">
        </test-method>
      </class>
      <class name="org.broadleafcommerce.extensibility.ExtensibilityTest">
        <test-method status="PASS" signature="test()" name="test" duration-ms="144" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="17" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.extensibility.ExtensibilityTest.test()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.extensibility.ExtensibilityTest.test()]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="org.broadleafcommerce.pricing.service.PricingTest">
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.pricing.service.PricingTest.testShippingInsert(org.broadleafcommerce.pricing.domain.ShippingRate,org.broadleafcommerce.pricing.domain.ShippingRate) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
        </test-method>
        <test-method status="PASS" signature="testPricing()" name="testPricing" duration-ms="9" depends-on-groups="testShippingInsert" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.pricing.service.PricingTest.testShipping() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.pricing.service.PricingTest.testShipping() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testShipping()" name="testShipping" duration-ms="7" depends-on-groups="testShippingInsert" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.pricing.service.PricingTest.testPricing() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testShippingInsert(org.broadleafcommerce.pricing.domain.ShippingRate, org.broadleafcommerce.pricing.domain.ShippingRate)" name="testShippingInsert" duration-ms="1" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[ALL 8.5 0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ALL 8.5 0]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.pricing.service.PricingTest.testShippingInsert(org.broadleafcommerce.pricing.domain.ShippingRate,org.broadleafcommerce.pricing.domain.ShippingRate) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="328" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.pricing.service.PricingTest.testPricing() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
        </test-method>
      </class>
      <class name="org.broadleafcommerce.order.dao.OrderDaoTest">
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="3" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.dao.OrderDaoTest.readOrderById()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="readOrderById()" name="readOrderById" duration-ms="0" depends-on-groups="createOrder" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.dao.OrderDaoTest.readOrdersForCustomer()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="deleteOrderForCustomer()" name="deleteOrderForCustomer" duration-ms="7" depends-on-groups="createOrder" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.dao.OrderDaoTest.readOrdersForCustomer()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="21" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.dao.OrderDaoTest.createOrder(org.broadleafcommerce.order.domain.Order)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.dao.OrderDaoTest.createOrder(org.broadleafcommerce.order.domain.Order)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
        </test-method>
        <test-method status="PASS" signature="readOrdersForCustomer()" name="readOrdersForCustomer" duration-ms="3" depends-on-groups="readCustomer1, createOrder" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.dao.OrderDaoTest.deleteOrderForCustomer()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.dao.OrderDaoTest.readOrderById()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createOrder(org.broadleafcommerce.order.domain.Order)" name="createOrder" duration-ms="2" depends-on-groups="readCustomer1, createPhone" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.order.domain.OrderImpl@f7c66bc4]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.dao.OrderDaoTest.deleteOrderForCustomer()]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="org.broadleafcommerce.offer.service.MVELTest">
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.MVELTest.testBasicMVELFunctions()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testOfferAppliesToItemsInCategoryAndOrderValueGreaterThanFifty()" name="testOfferAppliesToItemsInCategoryAndOrderValueGreaterThanFifty" duration-ms="18" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="14" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.MVELTest.testOfferAppliesToFulfillmentGroup()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="testBasicMVELFunctions()" name="testBasicMVELFunctions" duration-ms="68" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.MVELTest.testOfferAppliesToSpecificItems()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testOfferAppliesToSpecificItems()" name="testOfferAppliesToSpecificItems" duration-ms="3" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.MVELTest.testOfferAppliesToItemsInCategoryAndOrderValueGreaterThanFifty()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.MVELTest.testOfferAppliesToSpecificItems()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.MVELTest.testOfferAppliesToItemsInCategoryAndOrderValueGreaterThanFifty()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.MVELTest.testOfferAppliesToFulfillmentGroup()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.MVELTest.testBasicMVELFunctions()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testOfferAppliesToFulfillmentGroup()" name="testOfferAppliesToFulfillmentGroup" duration-ms="4" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
      </class>
      <class name="org.broadleafcommerce.order.dao.FulfillmentGroupDaoTest">
        <test-method status="PASS" signature="createFulfillmentGroup(org.broadleafcommerce.order.domain.FulfillmentGroup)" name="createFulfillmentGroup" duration-ms="4" depends-on-groups="createOrder, createCustomerAddress" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.order.domain.FulfillmentGroupImpl@3c2]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.dao.FulfillmentGroupDaoTest.createDefaultFulfillmentGroup(org.broadleafcommerce.order.domain.FulfillmentGroup)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="3" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.dao.FulfillmentGroupDaoTest.createFulfillmentGroup(org.broadleafcommerce.order.domain.FulfillmentGroup)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="20" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
        </test-method>
        <test-method status="PASS" signature="createDefaultFulfillmentGroup(org.broadleafcommerce.order.domain.FulfillmentGroup)" name="createDefaultFulfillmentGroup" duration-ms="376" depends-on-groups="createOrder, createCustomerAddress" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.order.domain.FulfillmentGroupImpl@3c2]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="readDefaultFulfillmentGroupForOrder()" name="readDefaultFulfillmentGroupForOrder" duration-ms="3" depends-on-groups="createDefaultFulfillmentGroup" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.dao.FulfillmentGroupDaoTest.createFulfillmentGroup(org.broadleafcommerce.order.domain.FulfillmentGroup)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="readDefaultFulfillmentGroupForId()" name="readDefaultFulfillmentGroupForId" duration-ms="1" depends-on-groups="createDefaultFulfillmentGroup" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.dao.FulfillmentGroupDaoTest.readFulfillmentGroupsForId()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="readFulfillmentGroupsForId()" name="readFulfillmentGroupsForId" duration-ms="3" depends-on-groups="createFulfillmentGroup" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.dao.FulfillmentGroupDaoTest.readDefaultFulfillmentGroupForOrder()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.dao.FulfillmentGroupDaoTest.readFulfillmentGroupsForId()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.dao.FulfillmentGroupDaoTest.readDefaultFulfillmentGroupForId()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.dao.FulfillmentGroupDaoTest.readDefaultFulfillmentGroupForOrder()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.dao.FulfillmentGroupDaoTest.createDefaultFulfillmentGroup(org.broadleafcommerce.order.domain.FulfillmentGroup)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.dao.FulfillmentGroupDaoTest.readDefaultFulfillmentGroupForId()]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="org.broadleafcommerce.profile.service.IdGenerationTest">
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.IdGenerationTest.findIds()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="18" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.IdGenerationTest.createId()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.IdGenerationTest.createId()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="findIds()" name="findIds" duration-ms="11" depends-on-groups="createId" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.IdGenerationTest.findIds()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createId()" name="createId" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
      </class>
      <class name="org.broadleafcommerce.catalog.dao.SkuDaoTest">
        <test-method status="SKIP" signature="readFirstSku()" name="readFirstSku" duration-ms="0" depends-on-groups="createSku" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="13" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="SKIP" signature="createSku(org.broadleafcommerce.catalog.domain.Sku)" name="createSku" duration-ms="0" depends-on-groups="createProduct, readCustomer1, createOrder" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method org.broadleafcommerce.catalog.dao.SkuDaoTest.createSku(org.broadleafcommerce.catalog.domain.Sku) depends on nonexistent group "createProduct"]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method org.broadleafcommerce.catalog.dao.SkuDaoTest.createSku(org.broadleafcommerce.catalog.domain.Sku) depends on nonexistent group "createProduct"
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1036)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
	at org.testng.TestRunner.runWorkers(TestRunner.java:759)
	at org.testng.TestRunner.privateRun(TestRunner.java:592)
	at org.testng.TestRunner.run(TestRunner.java:486)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:332)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:327)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:299)
	at org.testng.SuiteRunner.run(SuiteRunner.java:204)
	at org.testng.TestNG.createAndRunSuiteRunners(TestNG.java:877)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:842)
	at org.testng.TestNG.run(TestNG.java:751)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:62)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:141)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:177)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:338)
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:997)
]]>
            </full-stacktrace>
          </exception>
        </test-method>
        <test-method status="SKIP" signature="readSkuById()" name="readSkuById" duration-ms="0" depends-on-groups="createSku" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
      </class>
      <class name="org.broadleafcommerce.test.OrmTest">
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:59Z" finished-at="2009-08-05T15:42:59Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="16" started-at="2009-08-05T15:42:59Z" finished-at="2009-08-05T15:42:59Z">
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:59Z" finished-at="2009-08-05T15:42:59Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:59Z" finished-at="2009-08-05T15:42:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.test.OrmTest.testMappings()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:59Z" finished-at="2009-08-05T15:42:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.test.OrmTest.testMappings()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testMappings()" name="testMappings" duration-ms="0" started-at="2009-08-05T15:42:59Z" finished-at="2009-08-05T15:42:59Z">
        </test-method>
      </class>
      <class name="org.broadleafcommerce.payment.service.PaymentInfoServiceTest">
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="291" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.payment.service.PaymentInfoServiceTest.readPaymentInfoById()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.payment.service.PaymentInfoServiceTest.createPaymentInfo(org.broadleafcommerce.payment.domain.PaymentInfo)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createTestPaymentInfo()" name="createTestPaymentInfo" duration-ms="8" depends-on-groups="createPaymentInfo" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.payment.service.PaymentInfoServiceTest.createPaymentInfo(org.broadleafcommerce.payment.domain.PaymentInfo)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.payment.service.PaymentInfoServiceTest.createTestPaymentInfo()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="readPaymentInfoById()" name="readPaymentInfoById" duration-ms="360" depends-on-groups="createPaymentInfo" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.payment.service.PaymentInfoServiceTest.readPaymentInfoByOrder()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="readPaymentInfoByOrder()" name="readPaymentInfoByOrder" duration-ms="1" depends-on-groups="createPaymentInfo" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.payment.service.PaymentInfoServiceTest.readPaymentInfoByOrder()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.payment.service.PaymentInfoServiceTest.createTestPaymentInfo()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createPaymentInfo(org.broadleafcommerce.payment.domain.PaymentInfo)" name="createPaymentInfo" duration-ms="5" depends-on-groups="readCustomer1, createOrder" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.payment.domain.PaymentInfoImpl@1aa42fc2]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.payment.service.PaymentInfoServiceTest.readPaymentInfoById()]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="org.broadleafcommerce.offer.service.OfferServiceTest">
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="13" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="SKIP" signature="applyOffersToOrder(java.util.List)" name="applyOffersToOrder" duration-ms="0" depends-on-groups="getItemsForOrder, findCurrentCartForCustomer" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
      </class>
      <class name="org.broadleafcommerce.profile.service.CustomerTest">
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerTest.readCustomersByUsername1()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerTest.readCustomersByUsername2()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerTest.readCustomersById()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerTest.createCustomer(org.broadleafcommerce.profile.domain.Customer)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerTest.readCustomersByUsername2()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createCustomerIdGeneration()" name="createCustomerIdGeneration" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="createCustomer(org.broadleafcommerce.profile.domain.Customer)" name="createCustomer" duration-ms="19" depends-on-groups="createCustomerIdGeneration" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.profile.domain.CustomerImpl@600e7c32]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="changeCustomerPasswords()" name="changeCustomerPasswords" duration-ms="4" depends-on-groups="readCustomer1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerTest.changeCustomerPasswords()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="readCustomersById()" name="readCustomersById" duration-ms="1" depends-on-groups="createCustomers" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
        </test-method>
        <test-method status="PASS" signature="readCustomersByUsername2()" name="readCustomersByUsername2" duration-ms="4" depends-on-groups="changeCustomerPassword" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="readCustomersByUsername1()" name="readCustomersByUsername1" duration-ms="7" depends-on-groups="createCustomers" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="15" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerTest.readCustomersById()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerTest.createCustomer(org.broadleafcommerce.profile.domain.Customer)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="3" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerTest.createCustomer(org.broadleafcommerce.profile.domain.Customer)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerTest.createCustomerIdGeneration()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerTest.changeCustomerPasswords()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerTest.readCustomersByUsername1()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerTest.createCustomer(org.broadleafcommerce.profile.domain.Customer)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerTest.createCustomerIdGeneration()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createCustomer(org.broadleafcommerce.profile.domain.Customer)" name="createCustomer" duration-ms="1" depends-on-groups="createCustomerIdGeneration" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.profile.domain.CustomerImpl@600e7c33]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="org.broadleafcommerce.layout.PaginationCommandObjectTest">
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.layout.PaginationCommandObjectTest.testFullList()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="12" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="5" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.layout.PaginationCommandObjectTest.testIndices()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testFullList()" name="testFullList" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.layout.PaginationCommandObjectTest.testDisplayList()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testDisplayList()" name="testDisplayList" duration-ms="2" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.layout.PaginationCommandObjectTest.testFullList()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.layout.PaginationCommandObjectTest.testIndices()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="testIndices()" name="testIndices" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.layout.PaginationCommandObjectTest.testDisplayList()]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="org.broadleafcommerce.catalog.dao.CategoryDaoTest">
        <test-method status="PASS" signature="testSetFeaturedProducts(org.broadleafcommerce.catalog.domain.Category)" name="testSetFeaturedProducts" duration-ms="3" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.catalog.domain.CategoryImpl@9e7e16ce]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.CategoryDaoTest.testSetFeaturedProducts(org.broadleafcommerce.catalog.domain.Category)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="24" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.CategoryDaoTest.testSetFeaturedProducts(org.broadleafcommerce.catalog.domain.Category)]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="org.broadleafcommerce.profile.service.RegisterCustomerControllerTest">
        <test-method status="PASS" signature="viewRegisterCustomerFromController()" name="viewRegisterCustomerFromController" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="13" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="createCustomerFromController(org.broadleafcommerce.profile.web.form.RegisterCustomerForm)" name="createCustomerFromController" duration-ms="29" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.profile.web.form.RegisterCustomerForm@fb0c0b]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.RegisterCustomerControllerTest.createCustomerFromController(org.broadleafcommerce.profile.web.form.RegisterCustomerForm)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.RegisterCustomerControllerTest.createCustomerFromController(org.broadleafcommerce.profile.web.form.RegisterCustomerForm)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="6" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.RegisterCustomerControllerTest.viewRegisterCustomerFromController()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="setupControllerTest()" name="setupControllerTest" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="tearDownControllerTest()" name="tearDownControllerTest" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.RegisterCustomerControllerTest.viewRegisterCustomerFromController()]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="org.broadleafcommerce.order.dao.OrderItemDaoTest">
        <test-method status="SKIP" signature="readOrderItemsById()" name="readOrderItemsById" duration-ms="0" depends-on-groups="createDiscreteOrderItem" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="296" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
        </test-method>
        <test-method status="SKIP" signature="createGiftWrapOrderItem(org.broadleafcommerce.order.domain.GiftWrapOrderItem)" name="createGiftWrapOrderItem" duration-ms="1" depends-on-groups="readOrderItemsById" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="SKIP" signature="readGiftWrapOrderItemsById()" name="readGiftWrapOrderItemsById" duration-ms="0" depends-on-groups="createGiftWrapOrderItem" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="SKIP" signature="deleteGiftWrapOrderItemsById()" name="deleteGiftWrapOrderItemsById" duration-ms="0" depends-on-groups="readGiftWrapOrderItemsById" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="SKIP" signature="readOrderItemsByIdAfterGiftWrapDeletion()" name="readOrderItemsByIdAfterGiftWrapDeletion" duration-ms="1" depends-on-groups="deleteGiftWrapOrderItemsById" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="SKIP" signature="createDiscreteOrderItem(org.broadleafcommerce.order.domain.DiscreteOrderItem)" name="createDiscreteOrderItem" duration-ms="1" depends-on-groups="createSku, createOrder" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
        </test-method>
      </class>
      <class name="org.broadleafcommerce.order.service.OrderTest">
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.testAddSkuToOrder() throws org.broadleafcommerce.pricing.service.exception.PricingException]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.findCurrentCartForCustomer()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testReadOrdersForCustomer()" name="testReadOrdersForCustomer" duration-ms="9" depends-on-groups="findNamedOrderForCustomer" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
        </test-method>
        <test-method status="PASS" signature="findNamedOrderForCustomer()" name="findNamedOrderForCustomer" duration-ms="7" depends-on-groups="findOrderByOrderNumber" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.findNamedOrderForCustomer() throws org.broadleafcommerce.pricing.service.exception.PricingException]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="findCartForNullCustomerId()" name="findCartForNullCustomerId" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.testReadOrdersForCustomer() throws org.broadleafcommerce.pricing.service.exception.PricingException]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testAddSkuToOrder()" name="testAddSkuToOrder" duration-ms="184" depends-on-groups="testNamedOrderForCustomer" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
        </test-method>
        <test-method status="SKIP" signature="removeBundleFromOrder()" name="removeBundleFromOrder" duration-ms="0" depends-on-groups="addBundleToOrder" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.getOrdersForCustomer()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="6" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.testNamedOrderForCustomer() throws org.broadleafcommerce.pricing.service.exception.PricingException]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="SKIP" signature="addPaymentToOrder(org.broadleafcommerce.payment.domain.PaymentInfo)" name="addPaymentToOrder" duration-ms="0" depends-on-groups="checkOrderItems" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="PASS" signature="testSubmitOrder()" name="testSubmitOrder" duration-ms="4" depends-on-groups="findNamedOrderForCustomer" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
        </test-method>
        <test-method status="PASS" signature="findCartForAnonymousCustomer()" name="findCartForAnonymousCustomer" duration-ms="3" depends-on-groups="getOrdersForCustomer" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="SKIP" signature="removeItemFromOrder()" name="removeItemFromOrder" duration-ms="0" depends-on-groups="getItemsForOrder" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.testOrderProperties() throws org.broadleafcommerce.pricing.service.exception.PricingException]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="41" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="findCurrentCartForCustomer()" name="findCurrentCartForCustomer" duration-ms="3" depends-on-groups="readCustomer1, createCartForCustomer, createPhone" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="SKIP" signature="addAnotherItemToOrder()" name="addAnotherItemToOrder" duration-ms="1" depends-on-groups="addItemToOrder" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="SKIP" signature="findDefaultFillmentGroupForOrder()" name="findDefaultFillmentGroupForOrder" duration-ms="1" depends-on-groups="findCurrentCartForCustomer, addFulfillmentGroupToOrderFirst" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.testSubmitOrder() throws org.broadleafcommerce.pricing.service.exception.PricingException]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="SKIP" signature="removeFulfillmentGroupFromOrder()" name="removeFulfillmentGroupFromOrder" duration-ms="1" depends-on-groups="addFulfillmentGroupToOrderFirst" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="SKIP" signature="getItemsForOrder()" name="getItemsForOrder" duration-ms="1" depends-on-groups="removeBundleFromOrder" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="SKIP" signature="addItemToFulfillmentgroupSecond()" name="addItemToFulfillmentgroupSecond" duration-ms="0" depends-on-groups="addFulfillmentGroupToOrderFirst" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.createCartForCustomer()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="getOrdersForCustomer()" name="getOrdersForCustomer" duration-ms="10" depends-on-groups="findCurrentCartForCustomer, readCustomer1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="4" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.createCartForCustomer()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.findCartForAnonymousCustomer()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="SKIP" signature="updateItemsInOrder()" name="updateItemsInOrder" duration-ms="0" depends-on-groups="getItemsForOrder" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="5" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.findOrderByOrderNumber() throws org.broadleafcommerce.pricing.service.exception.PricingException]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.findOrderByOrderNumber() throws org.broadleafcommerce.pricing.service.exception.PricingException]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.findCartForAnonymousCustomer()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testOrderProperties()" name="testOrderProperties" duration-ms="10" depends-on-groups="testReadOrdersForCustomer" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
        </test-method>
        <test-method status="PASS" signature="createCartForCustomer()" name="createCartForCustomer" duration-ms="139" depends-on-groups="readCustomer1, createPhone" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="SKIP" signature="addFulfillmentGroupToOrderFirst(org.broadleafcommerce.order.domain.FulfillmentGroup)" name="addFulfillmentGroupToOrderFirst" duration-ms="0" depends-on-groups="addPaymentToOrder" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="PASS" signature="testOrderPaymentInfos(org.broadleafcommerce.payment.domain.PaymentInfo)" name="testOrderPaymentInfos" duration-ms="14" depends-on-groups="testAddSkuToOrder" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.payment.domain.PaymentInfoImpl@1aa42fc2]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.testOrderPaymentInfos(org.broadleafcommerce.payment.domain.PaymentInfo) throws org.broadleafcommerce.pricing.service.exception.PricingException]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="5" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.findCartForNullCustomerId()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.testReadOrdersForCustomer() throws org.broadleafcommerce.pricing.service.exception.PricingException]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="6" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.testSubmitOrder() throws org.broadleafcommerce.pricing.service.exception.PricingException]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.getOrdersForCustomer()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.findCurrentCartForCustomer()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="SKIP" signature="findFillmentGroupForOrderFirst()" name="findFillmentGroupForOrderFirst" duration-ms="0" depends-on-groups="addFulfillmentGroupToOrderFirst" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.findNamedOrderForCustomer() throws org.broadleafcommerce.pricing.service.exception.PricingException]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.testAddSkuToOrder() throws org.broadleafcommerce.pricing.service.exception.PricingException]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="findOrderByOrderNumber()" name="findOrderByOrderNumber" duration-ms="12" depends-on-groups="findCartForAnonymousCustomer" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.findCartForNullCustomerId()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="SKIP" signature="removeItemFromOrderAfterFulfillmentGroups()" name="removeItemFromOrderAfterFulfillmentGroups" duration-ms="277" depends-on-groups="addFulfillmentGroupToOrderFirst" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="PASS" signature="testNamedOrderForCustomer()" name="testNamedOrderForCustomer" duration-ms="7" depends-on-groups="testOrderProperties" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
        </test-method>
        <test-method status="SKIP" signature="addItemToOrder()" name="addItemToOrder" duration-ms="1" depends-on-groups="createSku, findCurrentCartForCustomer" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.testOrderProperties() throws org.broadleafcommerce.pricing.service.exception.PricingException]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="SKIP" signature="addBundleToOrder()" name="addBundleToOrder" duration-ms="2" depends-on-groups="addAnotherItemToOrder" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.testOrderPaymentInfos(org.broadleafcommerce.payment.domain.PaymentInfo) throws org.broadleafcommerce.pricing.service.exception.PricingException]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="SKIP" signature="checkOrderItems()" name="checkOrderItems" duration-ms="1" depends-on-groups="removeItemFromOrder" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.order.service.OrderTest.testNamedOrderForCustomer() throws org.broadleafcommerce.pricing.service.exception.PricingException]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="org.broadleafcommerce.profile.service.CustomerPhoneTest">
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerPhoneTest.readCustomerPhoneByUserId()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="readCustomerPhoneByUserId()" name="readCustomerPhoneByUserId" duration-ms="6" depends-on-groups="createCustomerPhone" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerPhoneTest.createCustomerPhone(org.broadleafcommerce.profile.domain.CustomerPhone)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerPhoneTest.readCustomerPhoneByUserId()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerPhoneTest.createCustomerPhone(org.broadleafcommerce.profile.domain.CustomerPhone)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="298" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:56Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerPhoneTest.createCustomerPhone(org.broadleafcommerce.profile.domain.CustomerPhone)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createCustomerPhone(org.broadleafcommerce.profile.domain.CustomerPhone)" name="createCustomerPhone" duration-ms="2" depends-on-groups="readCustomer1" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.profile.domain.CustomerPhoneImpl@bc829f28]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createCustomerPhone(org.broadleafcommerce.profile.domain.CustomerPhone)" name="createCustomerPhone" duration-ms="3" depends-on-groups="readCustomer1" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.profile.domain.CustomerPhoneImpl@bc829f28]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerPhoneTest.createCustomerPhone(org.broadleafcommerce.profile.domain.CustomerPhone)]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="org.broadleafcommerce.security.service.AdminUserTest">
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:59Z" finished-at="2009-08-05T15:42:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.security.service.AdminUserTest.testAdminUserSave(org.broadleafcommerce.security.domain.AdminUser) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:59Z" finished-at="2009-08-05T15:42:59Z">
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:59Z" finished-at="2009-08-05T15:42:59Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="15" started-at="2009-08-05T15:42:59Z" finished-at="2009-08-05T15:42:59Z">
        </test-method>
        <test-method status="PASS" signature="testAdminUserSave(org.broadleafcommerce.security.domain.AdminUser)" name="testAdminUserSave" duration-ms="15" started-at="2009-08-05T15:42:59Z" finished-at="2009-08-05T15:42:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.security.domain.AdminUserImpl@d2ca06]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:59Z" finished-at="2009-08-05T15:42:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.security.service.AdminUserTest.testAdminUserSave(org.broadleafcommerce.security.domain.AdminUser) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="org.broadleafcommerce.profile.service.CustomerPhoneControllerTest">
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerPhoneControllerTest.viewExistingCustomerPhoneFromController()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createCustomerPhoneFromController(org.broadleafcommerce.profile.web.model.PhoneNameForm)" name="createCustomerPhoneFromController" duration-ms="373" started-at="2009-08-05T15:42:52Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.profile.web.model.PhoneNameForm@d3ca11]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerPhoneControllerTest.readCustomerPhoneFromController()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerPhoneControllerTest.createCustomerPhoneFromController(org.broadleafcommerce.profile.web.model.PhoneNameForm)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="3" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerPhoneControllerTest.createCustomerPhoneFromController(org.broadleafcommerce.profile.web.model.PhoneNameForm)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerPhoneControllerTest.readCustomerPhoneFromController()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="viewExistingCustomerPhoneFromController()" name="viewExistingCustomerPhoneFromController" duration-ms="2" depends-on-groups="createCustomerPhoneFromController" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:52Z" finished-at="2009-08-05T15:42:52Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerPhoneControllerTest.makePhoneDefaultOnCustomerPhoneController()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerPhoneControllerTest.createCustomerPhoneFromController(org.broadleafcommerce.profile.web.model.PhoneNameForm)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="makePhoneDefaultOnCustomerPhoneController()" name="makePhoneDefaultOnCustomerPhoneController" duration-ms="8" depends-on-groups="createCustomerPhoneFromController" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerPhoneControllerTest.viewCustomerPhoneFromController()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerPhoneControllerTest.viewExistingCustomerPhoneFromController()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createCustomerPhoneFromController(org.broadleafcommerce.profile.web.model.PhoneNameForm)" name="createCustomerPhoneFromController" duration-ms="6" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.profile.web.model.PhoneNameForm@7755ce]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerPhoneControllerTest.makePhoneDefaultOnCustomerPhoneController()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="8840" started-at="2009-08-05T15:42:43Z" finished-at="2009-08-05T15:42:52Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerPhoneControllerTest.viewCustomerPhoneFromController()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="readCustomerPhoneFromController()" name="readCustomerPhoneFromController" duration-ms="6" depends-on-groups="createCustomerPhoneFromController" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="45" started-at="2009-08-05T15:42:52Z" finished-at="2009-08-05T15:42:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerPhoneControllerTest.createCustomerPhoneFromController(org.broadleafcommerce.profile.web.model.PhoneNameForm)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="viewCustomerPhoneFromController()" name="viewCustomerPhoneFromController" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
      </class>
      <class name="org.broadleafcommerce.offer.service.OfferTest">
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="297" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testCustomerAssociatedOffers() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testOfferDelete() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testOfferNotCombinableOrderOffersWithItemOffer()" name="testOfferNotCombinableOrderOffersWithItemOffer" duration-ms="13" depends-on-groups="testOfferNotCombinableOrderOffers" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testOfferLowerSalePriceWithNotCombinableOffer() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testOfferLowerSalePriceWithNotCombinableOffer()" name="testOfferLowerSalePriceWithNotCombinableOffer" duration-ms="15" depends-on-groups="testOfferLowerSalePrice" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testOfferUsedForPricing() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testCustomerAssociatedOffers()" name="testCustomerAssociatedOffers" duration-ms="14" depends-on-groups="testGlobalOffers" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testOfferCodeDao() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testCustomerAssociatedOffers() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testOfferUsedForPricing() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="createSku1(org.broadleafcommerce.catalog.domain.Sku)" name="createSku1" duration-ms="10" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.catalog.domain.SkuImpl@6924dfe]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testOfferNotStackableItemOffers() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testOfferLowerSalePriceWithNotCombinableOfferAndInformation() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testCustomerOffers() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="7" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.createSku2(org.broadleafcommerce.catalog.domain.Sku)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testOfferLowerSalePriceWithNotCombinableOfferAndInformation()" name="testOfferLowerSalePriceWithNotCombinableOfferAndInformation" duration-ms="327" depends-on-groups="testOfferLowerSalePriceWithNotCombinableOffer" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testReadAllOffers() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testOfferLowerSalePriceWithNotCombinableOffer2()" name="testOfferLowerSalePriceWithNotCombinableOffer2" duration-ms="32" depends-on-groups="testOfferLowerSalePriceWithNotCombinableOffer" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="PASS" signature="testOfferLowerSalePrice()" name="testOfferLowerSalePrice" duration-ms="19" depends-on-groups="testOfferNotCombinableItemOffers" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
        </test-method>
        <test-method status="PASS" signature="testOfferNotCombinableItemOffers()" name="testOfferNotCombinableItemOffers" duration-ms="17" depends-on-groups="testOfferNotStackableItemOffers" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testOfferNotCombinableOrderOffers() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="33" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="testOfferDelete()" name="testOfferDelete" duration-ms="18" depends-on-groups="testFulfillmentGroupOffers" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="testGlobalOffers()" name="testGlobalOffers" duration-ms="15" depends-on-groups="testOfferNotCombinableOrderOffersWithItemOffer" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="PASS" signature="createSku2(org.broadleafcommerce.catalog.domain.Sku)" name="createSku2" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.catalog.domain.SkuImpl@6924dff]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testOfferDelete() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testOfferNotCombinableOrderOffersWithItemOffer() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testOfferLowerSalePriceWithNotCombinableOffer2() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testOfferNotCombinableItemOffers() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testOfferLowerSalePriceWithNotCombinableOffer2() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testOfferNotStackableItemOffers()" name="testOfferNotStackableItemOffers" duration-ms="23" depends-on-groups="offerUsedForPricing" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
        </test-method>
        <test-method status="PASS" signature="testOfferNotCombinableOrderOffers()" name="testOfferNotCombinableOrderOffers" duration-ms="16" depends-on-groups="testOfferNotStackableOrderOffers" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testCustomerOffers() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.createSku1(org.broadleafcommerce.catalog.domain.Sku)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testOfferLowerSalePrice() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testOfferNotStackableOrderOffers() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testReadAllOffers()" name="testReadAllOffers" duration-ms="2" depends-on-groups="testOfferDelete" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testOfferNotCombinableOrderOffers() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testFulfillmentGroupOffers() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testOfferLowerSalePriceWithNotCombinableOfferAndInformation() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="5" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.createSku1(org.broadleafcommerce.catalog.domain.Sku)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testFulfillmentGroupOffers()" name="testFulfillmentGroupOffers" duration-ms="51" depends-on-groups="testCustomerAssociatedOffers" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testFulfillmentGroupOffers() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testOfferLowerSalePriceWithNotCombinableOffer() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testOfferUsedForPricing()" name="testOfferUsedForPricing" duration-ms="378" depends-on-groups="offerCreateSku1, offerCreateSku2" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:54Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.createSku2(org.broadleafcommerce.catalog.domain.Sku)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testOfferCodeDao() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testCustomerOffers()" name="testCustomerOffers" duration-ms="2" depends-on-groups="testOfferCodeDao" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testOfferNotCombinableItemOffers() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testOfferLowerSalePrice() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testGlobalOffers() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testOfferNotStackableOrderOffers() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testOfferNotStackableItemOffers() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testReadAllOffers() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testOfferNotStackableOrderOffers()" name="testOfferNotStackableOrderOffers" duration-ms="24" depends-on-groups="testOfferLowerSalePriceWithNotCombinableOffer2" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="PASS" signature="testOfferCodeDao()" name="testOfferCodeDao" duration-ms="4" depends-on-groups="testReadAllOffers" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testOfferNotCombinableOrderOffersWithItemOffer() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.offer.service.OfferTest.testGlobalOffers() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="org.broadleafcommerce.email.service.EmailTest">
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.email.service.EmailTest.testSynchronousEmail() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.email.service.EmailTest.testSynchronousEmail() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testSynchronousEmail()" name="testSynchronousEmail" duration-ms="169" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="12" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="tearDownEmailTest()" name="tearDownEmailTest" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="setupEmailTest()" name="setupEmailTest" is-config="true" duration-ms="15" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
      </class>
      <class name="org.broadleafcommerce.security.service.AdminPermissionTest">
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.security.service.AdminPermissionTest.testAdminPermissionSave(org.broadleafcommerce.security.domain.AdminPermission) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.security.service.AdminPermissionTest.testAdminPermissionSave(org.broadleafcommerce.security.domain.AdminPermission) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="testAdminPermissionSave(org.broadleafcommerce.security.domain.AdminPermission)" name="testAdminPermissionSave" duration-ms="10" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.security.domain.AdminPermissionImpl@326160]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="12" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
      </class>
      <class name="org.broadleafcommerce.profile.service.CustomerAddressTest">
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerAddressTest.createCustomerAddress(org.broadleafcommerce.profile.domain.CustomerAddress)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="readCustomerAddressByUserId()" name="readCustomerAddressByUserId" duration-ms="1" depends-on-groups="createCustomerAddress" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerAddressTest.createCustomerAddress(org.broadleafcommerce.profile.domain.CustomerAddress)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createCustomerAddress(org.broadleafcommerce.profile.domain.CustomerAddress)" name="createCustomerAddress" duration-ms="6" depends-on-groups="readCustomer1, createCountry" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.profile.domain.CustomerAddressImpl@f2d2ef18]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerAddressTest.readCustomerAddressByUserId()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerAddressTest.createCustomerAddress(org.broadleafcommerce.profile.domain.CustomerAddress)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="20" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerAddressTest.createCustomerAddress(org.broadleafcommerce.profile.domain.CustomerAddress)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.CustomerAddressTest.readCustomerAddressByUserId()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createCustomerAddress(org.broadleafcommerce.profile.domain.CustomerAddress)" name="createCustomerAddress" duration-ms="4" depends-on-groups="readCustomer1, createCountry" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.profile.domain.CustomerAddressImpl@adf68b7d]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="org.broadleafcommerce.catalog.dao.ProductDaoTest">
        <test-method status="PASS" signature="testReadProductsByName(org.broadleafcommerce.catalog.domain.Product)" name="testReadProductsByName" duration-ms="3" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.catalog.domain.ProductImpl@6f0ef148]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.createUpSaleValues(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createProducts(org.broadleafcommerce.catalog.domain.Product)" name="createProducts" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.catalog.domain.ProductImpl@58243576]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testReadProductsById(org.broadleafcommerce.catalog.domain.Product)" name="testReadProductsById" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.catalog.domain.ProductImpl@6f0ef148]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createProducts(org.broadleafcommerce.catalog.domain.Product)" name="createProducts" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.catalog.domain.ProductImpl@58243576]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.createProducts(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.createProducts(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.testReadProductsWithUpSaleValues(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.createProducts(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createProducts(org.broadleafcommerce.catalog.domain.Product)" name="createProducts" duration-ms="2" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.catalog.domain.ProductImpl@58243576]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.createCrossSaleValues(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.testReadProductsWithUpSaleValues(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.createProducts(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createCrossSaleValues(org.broadleafcommerce.catalog.domain.Product)" name="createCrossSaleValues" duration-ms="2" depends-on-groups="testReadProductsWithUpSaleValues" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.catalog.domain.ProductImpl@9d0]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.testReadProductsById(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.testFeaturedProduct(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createProducts(org.broadleafcommerce.catalog.domain.Product)" name="createProducts" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.catalog.domain.ProductImpl@58243576]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="4" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.createCrossSaleValues(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="createUpSaleValues(org.broadleafcommerce.catalog.domain.Product)" name="createUpSaleValues" duration-ms="12" depends-on-groups="createProducts" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.catalog.domain.ProductImpl@9b1]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.createProducts(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.createProducts(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.testReadProductsWithUpSaleValues(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createProducts(org.broadleafcommerce.catalog.domain.Product)" name="createProducts" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.catalog.domain.ProductImpl@58243576]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testFeaturedProduct(org.broadleafcommerce.catalog.domain.Product)" name="testFeaturedProduct" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.catalog.domain.ProductImpl@6f0ef148]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="4" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.createUpSaleValues(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.createProducts(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testReadProductsWithUpSaleValues(org.broadleafcommerce.catalog.domain.Product)" name="testReadProductsWithUpSaleValues" duration-ms="4" depends-on-groups="createUpSaleValues" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.catalog.domain.ProductImpl@9d0]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.createCrossSaleValues(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createProducts(org.broadleafcommerce.catalog.domain.Product)" name="createProducts" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.catalog.domain.ProductImpl@58243576]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.createUpSaleValues(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createUpSaleValues(org.broadleafcommerce.catalog.domain.Product)" name="createUpSaleValues" duration-ms="4" depends-on-groups="createProducts" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.catalog.domain.ProductImpl@9d0]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="20" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.createProducts(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.createUpSaleValues(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createProducts(org.broadleafcommerce.catalog.domain.Product)" name="createProducts" duration-ms="2" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.catalog.domain.ProductImpl@58243576]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="createCrossSaleValues(org.broadleafcommerce.catalog.domain.Product)" name="createCrossSaleValues" duration-ms="7" depends-on-groups="testReadProductsWithUpSaleValues" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.catalog.domain.ProductImpl@9b1]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.testReadProductsByName(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.testReadProductsWithUpSaleValues(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.createProducts(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.testReadProductsWithCrossSaleValues(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.createProducts(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.testReadProductsWithCrossSaleValues(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.testProductAttributes(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testReadProductsWithCrossSaleValues(org.broadleafcommerce.catalog.domain.Product)" name="testReadProductsWithCrossSaleValues" duration-ms="2" depends-on-groups="createCrossSaleValues" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.catalog.domain.ProductImpl@9d0]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.createProducts(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.testReadProductsWithCrossSaleValues(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="5" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.createProducts(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.testReadProductsWithCrossSaleValues(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testProductAttributes(org.broadleafcommerce.catalog.domain.Product)" name="testProductAttributes" duration-ms="2" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.catalog.domain.ProductImpl@6f0ef148]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.testProductAttributes(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.createProducts(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.createProducts(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.createCrossSaleValues(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testReadProductsWithCrossSaleValues(org.broadleafcommerce.catalog.domain.Product)" name="testReadProductsWithCrossSaleValues" duration-ms="2" depends-on-groups="createCrossSaleValues" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.catalog.domain.ProductImpl@9b1]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testReadProductsWithUpSaleValues(org.broadleafcommerce.catalog.domain.Product)" name="testReadProductsWithUpSaleValues" duration-ms="93" depends-on-groups="createUpSaleValues" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.catalog.domain.ProductImpl@9b1]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.testReadProductsByName(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.testFeaturedProduct(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.dao.ProductDaoTest.testReadProductsById(org.broadleafcommerce.catalog.domain.Product)]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="org.broadleafcommerce.catalog.service.CatalogTest">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="22" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.service.CatalogTest.testCatalog() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.service.CatalogTest.testCatalog() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.service.CatalogTest.testSkus() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="testSkus()" name="testSkus" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.catalog.service.CatalogTest.testSkus() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="testCatalog()" name="testCatalog" duration-ms="23" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
      </class>
      <class name="org.broadleafcommerce.profile.service.AddressTest">
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.AddressTest.createState()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.AddressTest.createCountry()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="findStates()" name="findStates" duration-ms="3" depends-on-groups="createState" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.AddressTest.findStates()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.AddressTest.createState()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createState()" name="createState" duration-ms="10" depends-on-groups="createCountry" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.AddressTest.findStates()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.AddressTest.findStateByAbbreviation()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.AddressTest.createCountry()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createCountry()" name="createCountry" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.AddressTest.findCountries()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="findCountries()" name="findCountries" duration-ms="1" depends-on-groups="createCountry" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.AddressTest.findCountryByShortName()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="findCountryByShortName()" name="findCountryByShortName" duration-ms="0" depends-on-groups="findCountries" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.AddressTest.findCountries()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="19" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.AddressTest.findStateByAbbreviation()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="findStateByAbbreviation()" name="findStateByAbbreviation" duration-ms="20" depends-on-groups="findStates" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.AddressTest.findCountryByShortName()]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="org.broadleafcommerce.checkout.service.CheckoutTest">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="10" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.checkout.service.CheckoutTest.testCheckout() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="FAIL" signature="testCheckout()" name="testCheckout" duration-ms="4" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <exception class="org.springframework.transaction.IllegalTransactionStateException">
            <message>
              <![CDATA[Pre-bound JDBC Connection found! JpaTransactionManager does not support running within DataSourceTransactionManager if told to manage the DataSource itself. It is recommended to use a single JpaTransactionManager for all transactions on a single DataSource, no matter whether JPA or JDBC access.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.transaction.IllegalTransactionStateException: Pre-bound JDBC Connection found! JpaTransactionManager does not support running within DataSourceTransactionManager if told to manage the DataSource itself. It is recommended to use a single JpaTransactionManager for all transactions on a single DataSource, no matter whether JPA or JDBC access.
	at org.springframework.orm.jpa.JpaTransactionManager.doBegin(JpaTransactionManager.java:308)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:374)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:263)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:101)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:89)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204)
	at $Proxy72.create(Unknown Source)
	at org.broadleafcommerce.checkout.service.CheckoutTest.testCheckout(CheckoutTest.java:87)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.testng.internal.MethodHelper.invokeMethod(MethodHelper.java:607)
	at org.testng.internal.MethodHelper$1.runTestMethod(MethodHelper.java:725)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:140)
	at sun.reflect.GeneratedMethodAccessor20.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.testng.internal.MethodHelper.invokeHookable(MethodHelper.java:733)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:510)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:669)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:956)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
	at org.testng.TestRunner.runWorkers(TestRunner.java:759)
	at org.testng.TestRunner.privateRun(TestRunner.java:592)
	at org.testng.TestRunner.run(TestRunner.java:486)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:332)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:327)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:299)
	at org.testng.SuiteRunner.run(SuiteRunner.java:204)
	at org.testng.TestNG.createAndRunSuiteRunners(TestNG.java:877)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:842)
	at org.testng.TestNG.run(TestNG.java:751)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:62)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:141)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:177)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:338)
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:997)
]]>
            </full-stacktrace>
          </exception>
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:58Z" finished-at="2009-08-05T15:42:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.checkout.service.CheckoutTest.testCheckout() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="org.broadleafcommerce.profile.service.PhoneTest">
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.PhoneTest.createPhone(org.broadleafcommerce.profile.domain.Phone)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.PhoneTest.createPhone(org.broadleafcommerce.profile.domain.Phone)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.PhoneTest.readPhoneById()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="readPhoneById()" name="readPhoneById" duration-ms="1" depends-on-groups="createPhone" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.profile.service.PhoneTest.readPhoneById()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
        <test-method status="PASS" signature="createPhone(org.broadleafcommerce.profile.domain.Phone)" name="createPhone" duration-ms="1" depends-on-groups="readCustomer1" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.profile.domain.PhoneImpl@9e2dbbe1]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="21" started-at="2009-08-05T15:42:53Z" finished-at="2009-08-05T15:42:53Z">
        </test-method>
      </class>
      <class name="org.broadleafcommerce.order.dao.FulfillmentGroupItemDaoTest">
        <test-method status="SKIP" signature="readFulfillmentGroupItemsById()" name="readFulfillmentGroupItemsById" duration-ms="1" depends-on-groups="createFulfillmentGroupItem" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="SKIP" signature="readFulfillmentGroupItemsForFulfillmentGroup()" name="readFulfillmentGroupItemsForFulfillmentGroup" duration-ms="0" depends-on-groups="createFulfillmentGroupItem" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="SKIP" signature="createFulfillmentGroupItem()" name="createFulfillmentGroupItem" duration-ms="1" depends-on-groups="createDefaultFulfillmentGroup, createDiscreteOrderItem, createOrder" started-at="2009-08-05T15:42:57Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="327" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:57Z">
        </test-method>
      </class>
      <class name="org.broadleafcommerce.inventory.service.SkuAvailabilityTest">
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="4" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="4" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.readAvailableSkusForLocation()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)" name="createSkuAvailability" duration-ms="0" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.inventory.domain.SkuAvailabilityImpl@3c4]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="checkAvailableQuantityWithNullQuantityOnHand()" name="checkAvailableQuantityWithNullQuantityOnHand" duration-ms="1" depends-on-groups="createSkuAvailability" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="16" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
        </test-method>
        <test-method status="PASS" signature="createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)" name="createSkuAvailability" duration-ms="0" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.inventory.domain.SkuAvailabilityImpl@3e3]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)" name="createSkuAvailability" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.inventory.domain.SkuAvailabilityImpl@3e5]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="6" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.readSKUAvailabilityEntries()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="checkAvailableQuantityWithReserveAndQOH()" name="checkAvailableQuantityWithReserveAndQOH" duration-ms="1" depends-on-groups="createSkuAvailability" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
        </test-method>
        <test-method status="PASS" signature="readSKUAvailabilityEntries()" name="readSKUAvailabilityEntries" duration-ms="6" depends-on-groups="createSkuAvailability" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
        </test-method>
        <test-method status="PASS" signature="createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)" name="createSkuAvailability" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.inventory.domain.SkuAvailabilityImpl@3e1]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.checkAvailableQuantityWithNullReserveQty()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.readAvailableSkusForUnknownLocation()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="readAvailableSkusForLocation()" name="readAvailableSkusForLocation" duration-ms="4" depends-on-groups="createSkuAvailability" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)" name="createSkuAvailability" duration-ms="2" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.inventory.domain.SkuAvailabilityImpl@3c2]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.checkAvailableQuantityWithNullQuantityOnHand()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)" name="createSkuAvailability" duration-ms="0" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.inventory.domain.SkuAvailabilityImpl@3e2]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.checkAvailableQuantityWithReserveAndQOH()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.checkAvailableQuantityWithReserveAndQOH()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:55Z" finished-at="2009-08-05T15:42:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.readSKUAvailabilityEntries()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.checkAvailableQuantityWithNullQuantityOnHand()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="readAvailableSkusForUnknownLocation()" name="readAvailableSkusForUnknownLocation" duration-ms="0" depends-on-groups="createSkuAvailability" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)" name="createSkuAvailability" duration-ms="0" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.inventory.domain.SkuAvailabilityImpl@3c3]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="checkAvailableQuantityWithNullReserveQty()" name="checkAvailableQuantityWithNullReserveQty" duration-ms="2" depends-on-groups="createSkuAvailability" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
        </test-method>
        <test-method status="PASS" signature="createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)" name="createSkuAvailability" duration-ms="0" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.inventory.domain.SkuAvailabilityImpl@3c5]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)" name="createSkuAvailability" duration-ms="0" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.inventory.domain.SkuAvailabilityImpl@3e4]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:56Z" finished-at="2009-08-05T15:42:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.checkAvailableQuantityWithNullReserveQty()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
        </test-method>
        <test-method status="PASS" signature="createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)" name="createSkuAvailability" duration-ms="0" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.broadleafcommerce.inventory.domain.SkuAvailabilityImpl@3c6]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.readAvailableSkusForLocation()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.createSkuAvailability(org.broadleafcommerce.inventory.domain.SkuAvailability)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2009-08-05T15:42:54Z" finished-at="2009-08-05T15:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.broadleafcommerce.inventory.service.SkuAvailabilityTest.readAvailableSkusForUnknownLocation()]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
    </test>
  </suite>
</testng-results>
